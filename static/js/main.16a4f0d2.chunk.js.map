{"version":3,"sources":["Components/Header.tsx","api/dbahnClient.ts","api/dbahn/getBoard.ts","api/dbahn/getLocation.ts","api/dbahn/getRoute.ts","logic/calculateRouteForDay.ts","Components/CustomMap.tsx","map-styles/greyMapStyle.ts","Components/SearchField.tsx","Components/MapWrapper.tsx","App.tsx","index.tsx"],"names":["Header","withTheme","props","AppBar","position","css","padding","display","flexDirection","justifyContent","Typography","variant","fontSize","Button","color","theme","palette","primary","contrastText","dbahnClient","axios","create","baseURL","getBoard","location","date","get","toISOString","headers","Authorization","Accept","getLocation","getRoute","detailsId","a","locationResponse","locations","data","id","console","log","boardResponse","boards","Map","routeResponse","stopName","error","message","calculateRouteForDate","containerStyle","width","height","libraries","center","lat","lng","options","styles","disableDefaultUI","GMap","useJsApiLoader","googleMapsApiKey","process","isLoaded","loadError","mapContainerStyle","zoom","CustomMap","SearchField","Box","Autocomplete","cities","map","city","Ort","renderInput","params","TextField","label","margin","inputProps","type","MapWrapper","React","useState","apiOutput","setApiOutput","onClick","Date","now","response","main","light","dark","secondary","spacing","muitheme","createTheme","App","Container","backgroundColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16a4f0d2.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { jsx, css, withTheme } from '@emotion/react'\nimport React from 'react';\nimport { AppBar, Theme, Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button'\n\ntype Props = {\n    theme: Theme\n}\n\nconst HeaderBase = (props: Props) => {\n    return (\n        <AppBar\n            position=\"sticky\"\n            css={{\n                padding: 8,\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-evenly\"\n            }}\n        >\n            <Typography\n                variant=\"h1\"\n                fontSize=\"2rem\"\n            >Welcome to MaximumTravel</Typography>\n            <Button\n                css={{ color: props.theme.palette.primary.contrastText }}\n            >\n                NightMode\n            </Button>\n        </AppBar>\n    );\n};\nconst Header = withTheme(HeaderBase);\nexport default Header;\n","import axios from \"axios\";\n\n\nconst dbahnClient = axios.create({\n    baseURL: \"https://api.deutschebahn.com/\"\n})\nexport default dbahnClient","import dbahnClient from \"../dbahnClient\";\n\n\nexport function getBoard(location: string, date: Date) {\n    return dbahnClient.get(\n        `fahrplan-plus/v1/departureBoard/${location}?date=${date.toISOString()}`, {\n            headers: {\n                Authorization: 'Bearer ' + process.env.REACT_APP_BAHN_API_KEY,\n                Accept: 'application/json',\n            }\n        }\n    )\n}","import dbahnClient from \"../dbahnClient\"\n\n\nexport function getLocation(location: string) {\n    return dbahnClient.get(\n        `fahrplan-plus/v1/location/${location}`, {\n            headers: {\n                Authorization: 'Bearer ' + process.env.REACT_APP_BAHN_API_KEY,\n                Accept: 'application/json',\n            }\n        }\n    )\n}","import dbahnClient from \"../dbahnClient\";\n\n\nexport function getRoute(detailsId: string) {\n    return dbahnClient.get(\n        `fahrplan-plus/v1/journeyDetails/${detailsId}`, {\n            headers: {\n                'Authorization': 'Bearer ' + process.env.REACT_APP_BAHN_API_KEY,\n                'Accept': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n            }\n        }\n    )\n}","import { getBoard } from \"../api/dbahn/getBoard\"\nimport { getLocation } from \"../api/dbahn/getLocation\"\nimport { getRoute } from \"../api/dbahn/getRoute\"\nimport { LocationResponse, RouteStop, StopResponse } from \"../models/dbahn\"\n\n\nasync function calculateRouteForDate(location: string, date: Date): Promise<string> {\n    const locationResponse = await getLocation(location)\n    const locations: LocationResponse = locationResponse.data\n    const locationId = locations[0].id  //! Only takes first match into account\n    console.log(\"Retrieved locations\")\n\n    const boardResponse = await getBoard(location, date)\n    const boards: StopResponse = boardResponse.data\n    console.log(\"retrieved boards\")\n\n    const routes = new Map<string, RouteStop[]>()\n    /* for (const board of boards) {\n        const route: RouteStop[] = (await getRoute(board.detailsId)).data\n        console.log(route)\n        routes.set(board.detailsId, route)\n        console.log(routes)\n    }\n     */\n    console.log(\"Trying to get single route\")\n    try {   \n        const routeResponse = await getRoute(boards[0].detailsId)\n        console.log(routeResponse)\n        return (routeResponse.data[0].stopName ?? \"Empty\")\n    } catch (error) {\n        console.log(\"had an error\")\n        console.error(error.message)\n    }\n    console.log(\"Got nothing\")\n    return \"Received nothing or failed\"\n}\n\nexport default calculateRouteForDate","import React from 'react'\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api'\nimport blueMapStyle from '../map-styles/blueMapStyle'\nimport greyMapStyle from '../map-styles/greyMapStyle'\nimport { Libraries } from '@react-google-maps/api/dist/utils/make-load-script-url'\n\ntype Props = {\n\n}\n\nconst containerStyle = {\n    width: 500,\n    height: 500\n};\n\nconst libraries: Libraries = [\"places\"]\n\nconst center = {\n    lat: 49.006889,\n    lng: 8.403653,\n}\nconst options = {\n    styles: greyMapStyle,\n    disableDefaultUI: true\n}\n\nfunction GMap() {\n    const { isLoaded, loadError } = useJsApiLoader({\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY!,\n        id: 'fa9a1bc2cb56ad9f',\n        libraries\n    })\n    if (loadError) return <div>Error loading maps</div>\n    if (!isLoaded) return <div>Loading map</div>\n    return (\n        <div>\n            <GoogleMap\n                mapContainerStyle={containerStyle}\n                zoom={8}\n                center={center}\n                options={options}\n            >\n            </GoogleMap>\n        </div>\n    )\n}\n\nfunction CustomMap() {\n    return (\n        <>\n            <GMap/>\n        </>\n    )\n}\nexport default CustomMap","export default [\n    {\n        \"featureType\": \"all\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"administrative\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"administrative\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#444444\"\n            },\n            {\n                \"visibility\": \"on\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"administrative.neighborhood\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"visibility\": \"on\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"on\"\n            },\n            {\n                \"color\": \"#e0dfe0\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi.park\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#a8a9a8\"\n            },\n            {\n                \"visibility\": \"on\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"saturation\": -100\n            },\n            {\n                \"lightness\": 45\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"visibility\": \"on\"\n            },\n            {\n                \"color\": \"#5b5b5a\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"simplified\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"labels.icon\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"all\",\n        \"stylers\": [\n            {\n                \"color\": \"#ffffff\"\n            },\n            {\n                \"visibility\": \"on\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    }\n]","import { Autocomplete, Box, TextField } from '@material-ui/core'\nimport React from 'react'\nimport cities from '../data/test-stations.json'\n\ntype Props = {\n\n}\n//! New to optimize handling large sets of data for the cities\n\nfunction SearchField() {\n    return (\n        <Box>\n            <Autocomplete\n                id=\"city-input\"\n                options={cities.map(city => city.Ort)}\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        label=\"Search input\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        inputProps={{...params.inputProps, type: 'search'}}\n                    />\n                )}\n            />\n        </Box>\n    )\n}\nexport default SearchField","import { Button, Typography } from '@material-ui/core'\nimport React from 'react'\nimport { getLocation } from '../api/dbahn/getLocation'\nimport calculateRouteForDate from '../logic/calculateRouteForDay'\nimport CustomMap from './CustomMap'\nimport SearchField from './SearchField'\n\nfunction MapWrapper() {\n    const [apiOutput, setApiOutput] = React.useState(\"\")\n    return (\n        <>\n            <SearchField />\n            <CustomMap />\n            <Button\n                onClick={async () => {\n                    const response = await calculateRouteForDate('Karlsruhe', new Date(Date.now()))\n                    console.log(\"retrieved info\")\n                    setApiOutput(response)\n                }}\n            >Test API</Button>\n            <Typography>{apiOutput}</Typography>\n        </>\n    )\n}\nexport default MapWrapper","/** @jsxImportSource @emotion/react */\nimport { jsx } from '@emotion/react'\nimport React from 'react';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\nimport Header from './Components/Header';\nimport MapWrapper from './Components/MapWrapper';\nimport { Container } from '@material-ui/core';\nimport { createTheme, ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@emotion/react';\n\n\nconst theme = {\n    palette: {\n        primary: {\n            main: \"#263238\",\n            light: \"#4f5b62\",\n            dark: \"#000a12\",\n            contrastText: \"#ffffff\"\n        },\n        secondary: {\n            main: \"#b0bec5\",\n            light: \"#e2f1f8\",\n            dark: \"#808e95\",\n            contrastText: \"#000000\"\n\n        }\n    },\n    spacing: 4\n}\nconst muitheme = createTheme(theme);\n\nfunction App() {\n    return (\n        <ThemeProvider theme={muitheme} >\n            <Container\n                css={{\n                    backgroundColor: theme.palette.primary.light,\n                    width: \"100vw\",\n                    height: \"100vh\",\n                }}\n            >\n                <Header />\n                <MapWrapper />\n            </Container>\n        </ThemeProvider>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}